package logger2

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
	logger "owen/aws-s3-logger"

	"github.com/joho/godotenv"
)

func mainT() {

	var err error

	err = godotenv.Load()

	if err != nil {
		log.Fatal("Error loading .env file")
	}

	ACCESS_KEY := os.Getenv("AWS_ACCESS_KEY")
	SECRET_KEY := os.Getenv("AWS_SECRET_KEY")
	logger := logger.S3Logger{}
	err = logger.InitClient(ACCESS_KEY, SECRET_KEY, "ap-northeast-1", "wallet-bc-log-test")
	if err != nil {
		log.Fatal(err.Error())
	}

	var buf bytes.Buffer
	logMsg := log.New(&buf, "[INFO]", log.LstdFlags)
	logMsg.Output(2, "hellllll")
	var msg string = buf.String()

	logger.Upload("my-test.log", msg)

	resp, err := logger.Read("my-test.log")
	if err != nil {
		log.Fatal(err.Error())
	}

	contents, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("Error reading object content:", err)
	}

	fmt.Println(string(contents))

	// // // Load the Shared AWS Configuration (~/.aws/config)
	// // cfg, err := config.LoadDefaultConfig(context.TODO(),
	// // 	config.WithRegion("ap-northeast-1"),
	// // )
	// // if err != nil {
	// // 	log.Fatal(err)
	// // }

	// // // Create an Amazon S3 service client
	// // client := s3.NewFromConfig(cfg)

	// creds := credentials.NewStaticCredentialsProvider(ACCESS_KEY, SECRET_KEY, "")

	// cfg, err := config.LoadDefaultConfig(context.TODO(),
	// 	config.WithCredentialsProvider(creds),
	// 	config.WithRegion("ap-northeast-1"),
	// )
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// client := s3.NewFromConfig(cfg)

	// filename := "test.json"

	// file, err := ioutil.ReadFile(filename)
	// uploader := manager.NewUploader(client)
	// result, err := uploader.Upload(context.TODO(), &s3.PutObjectInput{
	// 	Bucket: aws.String("wallet-bc-log-test"),
	// 	Key:    aws.String(filename),
	// 	Body:   bytes.NewReader(file),
	// })
	// if err != nil {
	// 	log.Fatal(err)
	// 	panic(err)
	// }

	// fmt.Println(result)

	// output2, err := client.ListBuckets(context.TODO(), &s3.ListBucketsInput{})
	// if err != nil {
	// 	panic(err)
	// }
	// for _, bucket := range output2.Buckets {
	// 	fmt.Println(*bucket.Name)
	// }

	// Get the first page of results for ListObjectsV2 for a bucket
	// output, err := client.ListObjectsV2(context.TODO(), &s3.ListObjectsV2Input{
	// 	Bucket: aws.String("wallet-bc-log-test"),
	// })
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// log.Println("first page results:")
	// for _, object := range output.Contents {
	// 	log.Printf("key=%s size=%d", aws.ToString(object.Key), object.Size)
	// }
}
