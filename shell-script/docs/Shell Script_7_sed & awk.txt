sed : 단순 문자열 처리 (고수준 문자열 처리는 Perl이 적합한 것으로 알고 있음)
awk : 단순 수치 연산 및 리포트 생성 (고수준 수치 처리는 Fortran이 적합한 것으로 알고 있음)

------------------------sed-------------------------
비상호대화형 스트림 편집기(Non-interactive stream oriented editor)

grep [regex]  -A [num] : 패턴에 일치하는 줄 아래로 num 줄 만큼 출력
grep [regex] -B [num] : 패턴에 일치하는 줄 위로 num 줄 만큼 출력
grep [regex] -C [num] : 패턴에 일치하는 줄 위/아래로 num 줄 만큼 출력

why sed?
파일 내용의 특정 줄을 출력하거나 여러 파일들의 내용을 수정해야 할 경우
하나의 서버 시스템이 아닌 여러 시스템들에 동일한 적용

sed -->
    특정 줄을 출력하고자 할 때
    패턴에 일치하는 줄을 출력하고자 할 때
    패턴에 일치하는 내용을 변경하고자 할 때

@ 명령 형식

    sed [option] 'instructions' filename

        option list :
            -n : 입력줄 자동 출력을 제한하기 위해 사용
                    sed 명령은 입력줄을 자동으로 출력하기 때문에 자동 출력을 억제하기 위해 쓴다.
            -e : 하나 이상의 지시어를 사용할 경우
            -i : 직접적 파일 편집을 위해 사용
            -f : sed 지시어 스크립트 파일을 사용하기 위해

        instructions : 지시어(들)
            지시어에는 주소, 패턴, 명령이 들어갈 수 있다.

    @ 출력

            ex) sed -n '/MYLINUX=/'p /etc/sysconfig/mytextfile
                패턴을 / 기호로 감싸고 쉘의 정규 표현식으로 처리되는 것을 막기 위해 '로 감싸기
                출력을 나타내는 명령 p를 같이 쓰기
            
            ex) sed -n '7p' /etc/sysconfig/mytextfile
                7번째 줄을 출력하라
                1은 첫번째 줄, $는 마지막 줄을 뜻함
            
            ex) sed -n '7, $p' /etc/sysconfig/mytextfile
                7번째 줄부터 마지막 줄까지 출력하라

            ex) sed -n '2p;5,6p;9p' /etc/sysconfig/mytextfile
                여러 줄의 범위를 출력
            
    @ 삭제

            p (Print) 명령 대신 d (Delete) 명령 사용
            -n 옵션은 사용하지 않으면 됨

    @ 치환

            [줄 범위]s /패턴/변경값/플래그

            텍스트 파일에서 존재하는 패턴에 대해  내용을 변경하고자 할 때 사용

    sed는 일반적으로 원본 파일 내용을 변경하지 않지만 대치 명령을 원본 파일에 바로 적용하고자 한다면
    -i 옵션을 사용하면 된다.

    구성 파일에 파라미터 값을 넣고 변경하고자 할 때 sed의 삽입(Insert), 추가(Append), 변경(Change) 기능 사용
    i   --> 명시된 줄번호 또는 패턴에 일치하는 줄의 윗줄에 문자열을 삽입(Insert)한다.
    a   -->  명시된 줄번호 또는 패턴에 일치하는 줄의 아랫줄에 문자열을 추가(Append)한다.
    c   --> 명시된 줄번호 또는 패턴에 일치하는 줄의 내용을 문자열로 변경(Change)한다.

    
######################################

------------------------awk-------------------------
이 프로그램을 만든 Alfred cho, Peter Weinberger, Brian Kernighan 이름에서 유래
텍스트 처리를 위한 프로그램 언어
1970년대에 만들어진 상당히 오래된 프로그램
이후 nawk, gawk, mawk로 파생됨, 리눅스에서 사용되는 것은 gawk(GNU awk)

sed 처럼 패턴 검색 기능을 가지고 있음

@명령 형식

    awk [option] 'program' filename

    옵션
        -f  :   awk 프로그램 파일을 사용하기 위해 사용 (예: -f 프로그램 파일명) 
        -F  :   입력 필드 구분자를 정의하기 위해 사용. 기본 필드 구분자는 스페이스(예: -F:)
        -v  :   변수를 선언하기 위해 사용(예: -v 변수명=값)

@ AWK 프로그램 구조

    BEGIN BLOCK : 입력의 첫 레코드(행, 줄)을 읽기 전 실행되어야 하는 사항들을 정의(예 : 변수 선언, 스크립트 설명 등)
    BODY BLOCK : 패턴에 일치하는 모든 입력 레코드가 action에 의해 처리됨, BODY라는 키워드를 사용할 필요는 없음
    END BLOCK : awk 프로그램 종료 전 처리되어야 되는 사항들을 정의